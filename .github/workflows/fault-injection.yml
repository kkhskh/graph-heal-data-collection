name: Fault Injection Data Collection

on:
  workflow_dispatch:
    inputs:
      hours:
        description: 'Hours to run'
        required: true
        default: '24'
      services:
        description: 'Services to inject faults into (space-separated)'
        required: true
        default: 'service_a service_b service_c service_d'

jobs:
  fault-injection:
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Start Docker daemon
      run: |
        sudo systemctl start docker || true
        sudo systemctl status docker
        sudo chmod 666 /var/run/docker.sock

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Build all services (force no-cache)
      run: |
        docker-compose build --no-cache

    - name: Start services
      run: |
        docker-compose up -d
        sleep 30

    - name: Show container status
      run: |
        docker-compose ps
        docker-compose logs service-a || true
        docker-compose logs service-b || true
        docker-compose logs service-c || true
        docker-compose logs service-d || true

    - name: Wait for all services to be healthy
      run: |
        for port in 5001 5002 5003 5004; do
          echo "Waiting for service on port $port to be ready..."
          until curl -sf http://localhost:$port/metrics; do sleep 2; done
          echo "Service on port $port is ready."
        done
        echo "All services are healthy."
    
    - name: Start monitoring
      run: |
        python scripts/run_monitoring.py &
        sleep 10
    
    - name: Run fault injection
      run: |
        python scripts/cloud_fault_injector.py --hours ${{ github.event.inputs.hours }} --services ${{ github.event.inputs.services }} --label-file fault_labels.csv
    
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: fault-injection-results
        path: |
          fault_labels.csv
          cloud_fault_injection.log
          metric_data.csv
        retention-days: 30
    
    - name: Clean up
      if: always()
      run: |
        docker-compose down
        docker system prune -f 

